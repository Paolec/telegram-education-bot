import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
from datetime import datetime

from config import Config
from database import (
    get_all_orders, get_order_details, update_order_price, update_order_status,
    update_order_completed_files, update_payment_url, delete_order,
    save_message_to_history, log_admin_action
)
from utils import create_order_folder, save_file, split_long_message, log_errors
from keyboards import (
    get_admin_main_keyboard, get_admin_order_actions_keyboard,
    get_admin_orders_navigation_keyboard, get_back_to_info_keyboard
)
from payment import generate_robokassa_payment_link

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
ADMIN_MAIN, ADMIN_VIEW_ORDERS, ADMIN_ORDER_DETAILS = range(3)
ADMIN_SEND_MESSAGE, ADMIN_SET_PRICE, ADMIN_UPLOAD_WORK = range(3, 6)


@log_errors
async def admin_start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user = update.effective_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user.id != Config.ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return ConversationHandler.END

    welcome_text = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {user.first_name}!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–∞–º–∏, –æ–±—â–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ "
        "–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç."
    )

    await update.message.reply_text(
        welcome_text,
        reply_markup=get_admin_main_keyboard()
    )

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    log_admin_action(user.id, "–≤–æ—à–µ–ª –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")

    return ADMIN_MAIN


@log_errors
async def admin_start_from_query(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏–∑ callback"""
    query = update.callback_query
    await query.answer()

    user = query.from_user

    welcome_text = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {user.first_name}!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–∞–º–∏, –æ–±—â–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ "
        "–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç."
    )

    await query.edit_message_text(
        welcome_text,
        reply_markup=get_admin_main_keyboard()
    )

    return ADMIN_MAIN


@log_errors
async def admin_cancel(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    user = update.effective_user
    context.user_data.clear()

    await update.message.reply_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
        reply_markup=get_admin_main_keyboard()
    )

    return ADMIN_MAIN


@log_errors
async def admin_view_orders(update: Update, context: CallbackContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
    orders = get_all_orders()

    if not orders:
        await query.edit_message_text(
            "üìã –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.",
            reply_markup=get_admin_main_keyboard()
        )
        return ADMIN_MAIN

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    context.user_data['all_orders'] = orders
    context.user_data['current_page'] = 0
    context.user_data['current_status'] = 'all'

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    orders_text = f"üìã –í—Å–µ –∑–∞–∫–∞–∑—ã ({len(orders)}):\n\n"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–∫–∞–∑–æ–≤
    for i, order in enumerate(orders[:5], 1):
        status_emoji = {
            'new': 'üîç',
            'in_progress': 'üõ†',
            'completed': '‚úÖ',
            'cancelled': '‚ùå'
        }.get(order['status'], '‚ùì')

        orders_text += (
            f"{i}. #{order['order_id']} - {status_emoji} {Config.ORDER_STATUSES.get(order['status'], order['status'])}\n"
            f"   üë§ {order.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"   üìö {order.get('discipline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"   üìÖ {order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é, –µ—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –±–æ–ª—å—à–µ 5
    total_pages = (len(orders) + 4) // 5  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö

    await query.edit_message_text(
        orders_text,
        reply_markup=get_admin_orders_navigation_keyboard('all', 0, total_pages)
    )

    return ADMIN_VIEW_ORDERS


@log_errors
async def admin_orders_by_status(update: Update, context: CallbackContext):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
    query = update.callback_query
    await query.answer()

    status = query.data.replace("admin_orders_", "")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
    all_orders = get_all_orders()

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if status == 'all':
        filtered_orders = all_orders
        status_text = "–≤—Å–µ"
    else:
        filtered_orders = [order for order in all_orders if order['status'] == status]
        status_text = Config.ORDER_STATUSES.get(status, status)

    if not filtered_orders:
        await query.edit_message_text(
            f"üìã –ó–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status_text}' –Ω–µ—Ç.",
            reply_markup=get_admin_main_keyboard()
        )
        return ADMIN_MAIN

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    context.user_data['all_orders'] = filtered_orders
    context.user_data['current_page'] = 0
    context.user_data['current_status'] = status

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    orders_text = f"üìã –ó–∞–∫–∞–∑—ã ({status_text}): {len(filtered_orders)}\n\n"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–∫–∞–∑–æ–≤
    for i, order in enumerate(filtered_orders[:5], 1):
        status_emoji = {
            'new': 'üîç',
            'in_progress': 'üõ†',
            'completed': '‚úÖ',
            'cancelled': '‚ùå'
        }.get(order['status'], '‚ùì')

        orders_text += (
            f"{i}. #{order['order_id']} - {status_emoji} {Config.ORDER_STATUSES.get(order['status'], order['status'])}\n"
            f"   üë§ {order.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"   üìö {order.get('discipline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"   üìÖ {order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é, –µ—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –±–æ–ª—å—à–µ 5
    total_pages = (len(filtered_orders) + 4) // 5  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö

    await query.edit_message_text(
        orders_text,
        reply_markup=get_admin_orders_navigation_keyboard(status, 0, total_pages)
    )

    return ADMIN_VIEW_ORDERS


@log_errors
async def admin_handle_orders_navigation(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∑–∞–∫–∞–∑–æ–≤"""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ callback_data
    parts = query.data.split('_')
    direction = parts[2]  # prev –∏–ª–∏ next
    status = parts[3]  # —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤
    page = int(parts[4])  # –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    filtered_orders = context.user_data.get('all_orders', [])

    if not filtered_orders:
        await query.edit_message_text(
            "‚ùå –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
            reply_markup=get_admin_main_keyboard()
        )
        return ADMIN_MAIN

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['current_page'] = page
    context.user_data['current_status'] = status

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    status_text = "–≤—Å–µ" if status == 'all' else Config.ORDER_STATUSES.get(status, status)
    orders_text = f"üìã –ó–∞–∫–∞–∑—ã ({status_text}): {len(filtered_orders)}\n\n"

    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * 5
    end_idx = min(start_idx + 5, len(filtered_orders))

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for i, order in enumerate(filtered_orders[start_idx:end_idx], start_idx + 1):
        status_emoji = {
            'new': 'üîç',
            'in_progress': 'üõ†',
            'completed': '‚úÖ',
            'cancelled': '‚ùå'
        }.get(order['status'], '‚ùì')

        orders_text += (
            f"{i}. #{order['order_id']} - {status_emoji} {Config.ORDER_STATUSES.get(order['status'], order['status'])}\n"
            f"   üë§ {order.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"   üìö {order.get('discipline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"   üìÖ {order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    total_pages = (len(filtered_orders) + 4) // 5  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö

    await query.edit_message_text(
        orders_text,
        reply_markup=get_admin_orders_navigation_keyboard(status, page, total_pages)
    )

    return ADMIN_VIEW_ORDERS


@log_errors
async def admin_order_details(update: Update, context: CallbackContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data
    order_id = query.data.replace("admin_order_", "")

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
    order_details = get_order_details(order_id)

    if not order_details:
        await query.edit_message_text(
            f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_admin_main_keyboard()
        )
        return ADMIN_MAIN

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
    order_text = (
        f"üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order_id}\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order_details.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} (ID: {order_details['user_id']})\n"
        f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {order_details.get('discipline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìã –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {order_details.get('work_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω: {order_details.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üí∞ –ë—é–¥–∂–µ—Ç: {order_details.get('budget', 0)} —Ä—É–±.\n"
        f"üíµ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {order_details.get('final_amount', 0)} —Ä—É–±.\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {Config.ORDER_STATUSES.get(order_details.get('status', 'new'), order_details.get('status', 'new'))}\n"
        f"üí≥ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {'‚úÖ –û–ø–ª–∞—á–µ–Ω' if order_details.get('payment_status') == 'paid' else '‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω'}\n"
    )

    if order_details.get('plagiarism_required', 0) == 1:
        order_text += (
            f"üîç –ê–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç: {order_details.get('plagiarism_system', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìä –¢—Ä–µ–±—É–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: {order_details.get('plagiarism_percent', 0)}%\n"
        )

    if order_details.get('description'):
        order_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {order_details['description']}\n"

    if order_details.get('files'):
        order_text += f"üìé –§–∞–π–ª—ã: {order_details['files']}\n"

    if order_details.get('expert_name'):
        order_text += f"üë®‚Äçüíª –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {order_details['expert_name']}\n"

    if order_details.get('completed_files'):
        order_text += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {order_details['completed_files']}\n"

    order_text += f"\nüìÖ –°–æ–∑–¥–∞–Ω: {order_details.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    context.user_data['current_order_id'] = order_id

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    log_admin_action(query.from_user.id, f"–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ {order_id}")

    await query.edit_message_text(
        order_text,
        reply_markup=get_admin_order_actions_keyboard(order_id)
    )

    return ADMIN_ORDER_DETAILS


@log_errors
async def admin_send_message(update: Update, context: CallbackContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data
    order_id = query.data.replace("admin_send_msg_", "")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['current_order_id'] = order_id

    await query.edit_message_text(
        f"üí¨ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–∫–∞–∑ #{order_id}):"
    )

    return ADMIN_SEND_MESSAGE


@log_errors
async def admin_handle_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    message_text = update.message.text
    order_id = context.user_data.get('current_order_id')

    if not order_id:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞–∫–∞–∑–∞.",
            reply_markup=get_admin_main_keyboard()
        )
        return ADMIN_MAIN

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
    order_details = get_order_details(order_id)

    if not order_details:
        await update.message.reply_text(
            f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_admin_main_keyboard()
        )
        return ADMIN_MAIN

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        user_message = (
            f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –∑–∞–∫–∞–∑—É #{order_id}:\n\n"
            f"{message_text}\n\n"
            f"–î–ª—è –æ—Ç–≤–µ—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )

        await context.bot.send_message(
            chat_id=order_details['user_id'],
            text=user_message
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        save_message_to_history(order_id, "admin", message_text)

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        log_admin_action(update.effective_user.id, f"–æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É {order_id}")

        await update.message.reply_text(
            f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∑–∞–∫–∞–∑ #{order_id}).",
            reply_markup=get_admin_order_actions_keyboard(order_id)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await update.message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}",
            reply_markup=get_admin_order_actions_keyboard(order_id)
        )

    return ADMIN_ORDER_DETAILS


@log_errors
async def admin_set_price(update: Update, context: CallbackContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã –∑–∞–∫–∞–∑–∞"""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data
    order_id = query.data.replace("admin_set_price_", "")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['current_order_id'] = order_id

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
    order_details = get_order_details(order_id)

    if not order_details:
        await query.edit_message_text(
            f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_admin_main_keyboard()
        )
        return ADMIN_MAIN

    budget = order_details.get('budget', 0)

    await query.edit_message_text(
        f"üí∞ –¢–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç –∑–∞–∫–∞–∑–∞: {budget} —Ä—É–±.\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ #{order_id} –≤ —Ä—É–±–ª—è—Ö:"
    )

    return ADMIN_SET_PRICE


@log_errors
async def admin_handle_price(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω—ã –∑–∞–∫–∞–∑–∞"""
    try:
        price = float(update.message.text)

        if price <= 0:
            await update.message.reply_text(
                "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return ADMIN_SET_PRICE

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:"
        )
        return ADMIN_SET_PRICE

    order_id = context.user_data.get('current_order_id')

    if not order_id:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞–∫–∞–∑–∞.",
            reply_markup=get_admin_main_keyboard()
        )
        return ADMIN_MAIN

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –∑–∞–∫–∞–∑–∞
    update_order_price(order_id, price)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É
    order_details = get_order_details(order_id)
    payment_url = generate_robokassa_payment_link(
        order_id=order_id,
        amount=price,
        description=f"{order_details['work_type']} –ø–æ {order_details['discipline']}",
        user_id=order_details['user_id']
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –ë–î
    update_payment_url(order_id, payment_url)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        user_message = (
            f"üí∞ –î–ª—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #{order_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞: {price} —Ä—É–±.\n\n"
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_url}\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ä–∞–±–æ—Ç–∞ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ."
        )

        await context.bot.send_message(
            chat_id=order_details['user_id'],
            text=user_message
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        log_admin_action(update.effective_user.id, f"—É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ü–µ–Ω—É {price} —Ä—É–±. –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

        await update.message.reply_text(
            f"‚úÖ –¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ #{order_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price} —Ä—É–±.\n\n"
            f"–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
            reply_markup=get_admin_order_actions_keyboard(order_id)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await update.message.reply_text(
            f"‚úÖ –¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ #{order_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price} —Ä—É–±.\n\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}",
            reply_markup=get_admin_order_actions_keyboard(order_id)
        )

    return ADMIN_ORDER_DETAILS


@log_errors
async def admin_upload_work(update: Update, context: CallbackContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data
    order_id = query.data.replace("admin_upload_work_", "")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['current_order_id'] = order_id
    context.user_data['completed_files'] = []

    await query.edit_message_text(
        f"üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}.\n\n"
        "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
    )

    return ADMIN_UPLOAD_WORK


@log_errors
async def admin_handle_completed_file(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
    order_id = context.user_data.get('current_order_id')

    if not order_id:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞–∫–∞–∑–∞.",
            reply_markup=get_admin_main_keyboard()
        )
        return ADMIN_MAIN

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    order_details = get_order_details(order_id)
    order_folder = create_order_folder(order_id, order_details['user_id'], "completed")

    if not order_folder:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã.",
            reply_markup=get_admin_order_actions_keyboard(order_id)
        )
        return ADMIN_ORDER_DETAILS

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    if update.message.document:
        file = update.message.document
    elif update.message.photo:
        file = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
    else:
        await update.message.reply_text(
            "‚ùå –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
        )
        return ADMIN_UPLOAD_WORK

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if file.file_size > Config.MAX_FILE_SIZE:
        await update.message.reply_text(
            f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {Config.MAX_FILE_SIZE // 1024 // 1024}MB."
        )
        return ADMIN_UPLOAD_WORK

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    file_path = await save_file(file, order_folder)

    if file_path:
        if 'completed_files' not in context.user_data:
            context.user_data['completed_files'] = []
        context.user_data['completed_files'].append(file_path)

        await update.message.reply_text(
            f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(context.user_data['completed_files'])}\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
        )
    else:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

    return ADMIN_UPLOAD_WORK


@log_errors
async def admin_finish_upload_work(update: Update, context: CallbackContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
    order_id = context.user_data.get('current_order_id')

    if not order_id:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞–∫–∞–∑–∞.",
            reply_markup=get_admin_main_keyboard()
        )
        return ADMIN_MAIN

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ë–î
    completed_files = context.user_data.get('completed_files', [])
    update_order_completed_files(order_id, completed_files)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    order_details = get_order_details(order_id)

    try:
        user_message = (
            f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n"
            f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(completed_files)}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ."
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ", callback_data=f"student_approve_{order_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"student_reject_{order_id}")]
        ])

        await context.bot.send_message(
            chat_id=order_details['user_id'],
            text=user_message,
            reply_markup=confirm_keyboard
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        log_admin_action(update.effective_user.id, f"–∑–∞–≥—Ä—É–∑–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

        await update.message.reply_text(
            f"‚úÖ –†–∞–±–æ—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É #{order_id} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
            reply_markup=get_admin_order_actions_keyboard(order_id)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await update.message.reply_text(
            f"‚úÖ –†–∞–±–æ—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É #{order_id} –∑–∞–≥—Ä—É–∂–µ–Ω–∞.\n\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}",
            reply_markup=get_admin_order_actions_keyboard(order_id)
        )

    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if 'completed_files' in context.user_data:
        del context.user_data['completed_files']

    return ADMIN_ORDER_DETAILS


@log_errors
async def admin_complete_order(update: Update, context: CallbackContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data
    order_id = query.data.replace("admin_complete_", "")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    update_order_status(order_id, "completed")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    order_details = get_order_details(order_id)

    try:
        user_message = (
            f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ! –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

        await context.bot.send_message(
            chat_id=order_details['user_id'],
            text=user_message
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        log_admin_action(query.from_user.id, f"–∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–∫–∞–∑ {order_id}")

        await query.edit_message_text(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω.",
            reply_markup=get_admin_order_actions_keyboard(order_id)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await query.edit_message_text(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}",
            reply_markup=get_admin_order_actions_keyboard(order_id)
        )

    return ADMIN_ORDER_DETAILS


@log_errors
async def admin_cancel_order(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞"""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data
    order_id = query.data.replace("admin_cancel_", "")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    update_order_status(order_id, "cancelled")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    order_details = get_order_details(order_id)

    try:
        user_message = (
            f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
            f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω."
        )

        await context.bot.send_message(
            chat_id=order_details['user_id'],
            text=user_message
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        log_admin_action(query.from_user.id, f"–æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ {order_id}")

        await query.edit_message_text(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=get_admin_order_actions_keyboard(order_id)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await query.edit_message_text(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}",
            reply_markup=get_admin_order_actions_keyboard(order_id)
        )

    return ADMIN_ORDER_DETAILS


@log_errors
async def handle_wrong_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    return context.user_data.get('current_state', ADMIN_MAIN)