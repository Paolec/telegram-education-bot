import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
from datetime import datetime

from config import Config
from database import (
    save_order_to_db, get_user_orders, update_payment_url,
    update_order_status, get_order_details
)
from utils import (
    generate_order_id, create_order_folder, save_file,
    validate_deadline, validate_budget, validate_plagiarism_percent,
    split_long_message, log_errors
)
from keyboards import (
    get_disciplines_keyboard, get_work_types_keyboard,
    get_plagiarism_systems_keyboard, get_budget_type_keyboard,
    get_plagiarism_required_keyboard, get_upload_done_keyboard,
    get_skip_description_keyboard, get_user_main_keyboard,
    get_info_keyboard, get_back_to_info_keyboard,
    get_payment_confirmation_keyboard
)
from payment import generate_robokassa_payment_link

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
USER_SELECTING_ACTION, USER_CHOOSE_DISCIPLINE, USER_CHOOSE_WORK_TYPE = range(3)
USER_SET_CUSTOM_WORK_TYPE, USER_SET_DEADLINE, USER_SELECT_BUDGET_TYPE = range(3, 6)
USER_SET_BUDGET, USER_SET_PLAGIARISM_REQUIRED, USER_CHOOSING_PLAGIARISM_SYSTEM = range(6, 9)
USER_SET_PLAGIARISM_PERCENT, USER_UPLOAD_FILES, USER_SET_DESCRIPTION = range(9, 12)
USER_VIEWING_ORDERS, USER_INFO_MENU = range(12, 14)


@log_errors
async def user_start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    context.user_data.clear()

    welcome_text = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–∫–∞–∑–∞—Ç—å —É—á–µ–±–Ω—É—é —Ä–∞–±–æ—Ç—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    if update.message:
        await update.message.reply_text(
            welcome_text,
            reply_markup=get_user_main_keyboard()
        )
    else:
        await update.callback_query.edit_message_text(
            welcome_text,
            reply_markup=get_user_main_keyboard()
        )

    return USER_SELECTING_ACTION


@log_errors
async def user_cancel(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã"""
    user = update.effective_user
    context.user_data.clear()

    await update.message.reply_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
        reply_markup=get_user_main_keyboard()
    )

    return USER_SELECTING_ACTION


@log_errors
async def user_create_order(update: Update, context: CallbackContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    query = update.callback_query
    await query.answer()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    from database import get_user_active_orders_count
    active_orders = get_user_active_orders_count(query.from_user.id)

    if active_orders >= Config.MAX_ACTIVE_ORDERS:
        await query.edit_message_text(
            f"‚ùå –£ –≤–∞—Å —É–∂–µ {active_orders} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. "
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {Config.MAX_ACTIVE_ORDERS}.",
            reply_markup=get_user_main_keyboard()
        )
        return USER_SELECTING_ACTION

    context.user_data['order'] = {
        'user_id': query.from_user.id,
        'username': query.from_user.username or query.from_user.full_name
    }

    disciplines_text = (
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã:\n\n"
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é, "
        "–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏."
    )

    await query.edit_message_text(
        disciplines_text,
        reply_markup=get_disciplines_keyboard()
    )

    return USER_CHOOSE_DISCIPLINE


@log_errors
async def user_choose_discipline(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"""
    query = update.callback_query
    await query.answer()

    if query.data == "user_back_to_start":
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_user_main_keyboard()
        )
        return USER_SELECTING_ACTION

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏–∑ callback_data
    disc_id = query.data.replace("user_disc_", "")

    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –ø–æ ID
    disc_name = next((name for id, name in Config.DISCIPLINES if id == disc_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['order']['discipline'] = disc_name
    context.user_data['order']['discipline_id'] = disc_id

    work_types_text = (
        f"üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã –¥–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã '{disc_name}':\n\n"
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –≤—ã–±–µ—Ä–∏—Ç–µ '–î—Ä—É–≥–æ–µ' "
        "–∏ —É–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏."
    )

    await query.edit_message_text(
        work_types_text,
        reply_markup=get_work_types_keyboard()
    )

    return USER_CHOOSE_WORK_TYPE


@log_errors
async def user_choose_work_type(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã"""
    query = update.callback_query
    await query.answer()

    if query.data == "user_back_to_disciplines":
        disciplines_text = "üìö –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã:"
        await query.edit_message_text(
            disciplines_text,
            reply_markup=get_disciplines_keyboard()
        )
        return USER_CHOOSE_DISCIPLINE

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã –∏–∑ callback_data
    work_id = query.data.replace("user_work_", "")

    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã –ø–æ ID
    work_name = next((name for id, name in Config.WORK_TYPES if id == work_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞–±–æ—Ç—ã")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['order']['work_type'] = work_name
    context.user_data['order']['work_type_id'] = work_id

    if work_id == "other":
        await query.edit_message_text(
            "‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏:",
            reply_markup=get_back_to_info_keyboard()
        )
        return USER_SET_CUSTOM_WORK_TYPE

    await query.edit_message_text(
        "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.08.2025):"
    )

    return USER_SET_DEADLINE


@log_errors
async def user_set_custom_work_type(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã"""
    custom_work_type = update.message.text

    if len(custom_work_type) > 100:
        await update.message.reply_text(
            "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã –∫–æ—Ä–æ—á–µ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤):"
        )
        return USER_SET_CUSTOM_WORK_TYPE

    context.user_data['order']['work_type'] = custom_work_type
    context.user_data['order']['work_type_id'] = "custom"

    await update.message.reply_text(
        "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.08.2025):"
    )

    return USER_SET_DEADLINE


@log_errors
async def user_handle_deadline(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–µ–¥–ª–∞–π–Ω–∞"""
    deadline_str = update.message.text
    is_valid, result = validate_deadline(deadline_str)

    if not is_valid:
        await update.message.reply_text(f"‚ùå {result}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return USER_SET_DEADLINE

    context.user_data['order']['deadline'] = deadline_str

    budget_text = (
        "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞:\n\n"
        "‚Ä¢ –£–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –±—é–¥–∂–µ—Ç - –≤—ã —Å–∞–º–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≥–æ—Ç–æ–≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å\n"
        "‚Ä¢ –¶–µ–Ω—É –Ω–∞–∑–Ω–∞—á–∏—Ç —ç–∫—Å–ø–µ—Ä—Ç - –º—ã –æ—Ü–µ–Ω–∏–º —Ä–∞–±–æ—Ç—É –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É"
    )

    await update.message.reply_text(
        budget_text,
        reply_markup=get_budget_type_keyboard()
    )

    return USER_SELECT_BUDGET_TYPE


@log_errors
async def user_handle_budget_type(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±—é–¥–∂–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()

    if query.data == "user_set_budget":
        await query.edit_message_text(
            f"üí∞ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - {Config.MIN_BUDGET} —Ä—É–±.):"
        )
        return USER_SET_BUDGET
    else:  # user_expert_budget
        context.user_data['order']['budget'] = 0  # 0 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ü–µ–Ω—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç —ç–∫—Å–ø–µ—Ä—Ç

        plagiarism_text = (
            "üîç –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç?\n\n"
            "–ú—ã –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—ã –∞–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç."
        )

        await query.edit_message_text(
            plagiarism_text,
            reply_markup=get_plagiarism_required_keyboard()
        )
        return USER_SET_PLAGIARISM_REQUIRED


@log_errors
async def user_handle_budget(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞"""
    budget_str = update.message.text
    is_valid, result = validate_budget(budget_str)

    if not is_valid:
        await update.message.reply_text(f"‚ùå {result}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return USER_SET_BUDGET

    context.user_data['order']['budget'] = result

    plagiarism_text = (
        "üîç –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç?\n\n"
        "–ú—ã –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—ã –∞–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç."
    )

    await update.message.reply_text(
        plagiarism_text,
        reply_markup=get_plagiarism_required_keyboard()
    )

    return USER_SET_PLAGIARISM_REQUIRED


@log_errors
async def user_handle_plagiarism_required(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∞–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç"""
    query = update.callback_query
    await query.answer()

    if query.data == "user_plagiarism_yes":
        context.user_data['order']['plagiarism_required'] = 1

        systems_text = "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç–∞:"

        await query.edit_message_text(
            systems_text,
            reply_markup=get_plagiarism_systems_keyboard()
        )
        return USER_CHOOSING_PLAGIARISM_SYSTEM
    else:
        context.user_data['order']['plagiarism_required'] = 0
        context.user_data['order']['plagiarism_system'] = ""
        context.user_data['order']['plagiarism_percent'] = 0

        files_text = (
            "üìé –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —Å –∑–∞–¥–∞–Ω–∏–µ–º (–µ—Å–ª–∏ –µ—Å—Ç—å).\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã. "
            "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É'."
        )

        await query.edit_message_text(
            files_text,
            reply_markup=get_upload_done_keyboard()
        )
        return USER_UPLOAD_FILES


@log_errors
async def user_handle_plagiarism_system(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –∞–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç–∞"""
    query = update.callback_query
    await query.answer()

    system_id = query.data.replace("user_plag_sys_", "")
    system_data = Config.PLAGIARISM_SYSTEMS.get(system_id, {})

    context.user_data['order']['plagiarism_system'] = system_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞')
    context.user_data['order']['plagiarism_system_id'] = system_id

    await query.edit_message_text(
        "üî¢ –£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (–æ—Ç 0 –¥–æ 100):"
    )

    return USER_SET_PLAGIARISM_PERCENT


@log_errors
async def user_handle_plagiarism_percent(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∞–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç–∞"""
    percent_str = update.message.text
    is_valid, result = validate_plagiarism_percent(percent_str)

    if not is_valid:
        await update.message.reply_text(f"‚ùå {result}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return USER_SET_PLAGIARISM_PERCENT

    context.user_data['order']['plagiarism_percent'] = result

    files_text = (
        "üìé –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —Å –∑–∞–¥–∞–Ω–∏–µ–º (–µ—Å–ª–∏ –µ—Å—Ç—å).\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã. "
        "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É'."
    )

    await update.message.reply_text(
        files_text,
        reply_markup=get_upload_done_keyboard()
    )

    return USER_UPLOAD_FILES


@log_errors
async def user_handle_files(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    if 'order' not in context.user_data:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start."
        )
        return USER_SELECTING_ACTION

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
    if 'order_id' not in context.user_data['order']:
        order_id = generate_order_id(update.effective_user.id)
        context.user_data['order']['order_id'] = order_id
        order_folder = create_order_folder(order_id, update.effective_user.id)
        context.user_data['order_folder'] = order_folder
    else:
        order_folder = context.user_data.get('order_folder')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    if update.message.document:
        file = update.message.document
    elif update.message.photo:
        file = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
    else:
        await update.message.reply_text(
            "‚ùå –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
        )
        return USER_UPLOAD_FILES

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if file.file_size > Config.MAX_FILE_SIZE:
        await update.message.reply_text(
            f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {Config.MAX_FILE_SIZE // 1024 // 1024}MB."
        )
        return USER_UPLOAD_FILES

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if hasattr(file, 'mime_type') and file.mime_type not in Config.ALLOWED_FILE_TYPES:
        await update.message.reply_text(
            "‚ùå –¢–∏–ø —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PDF, Word, Excel, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –∞—Ä—Ö–∏–≤—ã."
        )
        return USER_UPLOAD_FILES

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    file_path = await save_file(file, order_folder)

    if file_path:
        if 'files' not in context.user_data:
            context.user_data['files'] = []
        context.user_data['files'].append(file_path)

        await update.message.reply_text(
            f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(context.user_data['files'])}\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É'.",
            reply_markup=get_upload_done_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

    return USER_UPLOAD_FILES


@log_errors
async def user_handle_upload_done(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    query = update.callback_query
    await query.answer()

    if 'files' in context.user_data:
        context.user_data['order']['files'] = context.user_data['files']

    description_text = (
        "üìù –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∑–∞–∫–∞–∑—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, –º–µ—Ç–æ–¥–∏—á–∫–∏ –∏–ª–∏ –¥—Ä—É–≥—É—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. "
        "–ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ'."
    )

    await query.edit_message_text(
        description_text,
        reply_markup=get_skip_description_keyboard()
    )

    return USER_SET_DESCRIPTION


@log_errors
async def user_handle_description(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    description = update.message.text

    if len(description) > 2000:
        await update.message.reply_text(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 2000 —Å–∏–º–≤–æ–ª–æ–≤.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_skip_description_keyboard()
        )
        return USER_SET_DESCRIPTION

    context.user_data['order']['description'] = description

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
    order_id = save_order_to_db(context.user_data['order'])

    if not order_id:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_user_main_keyboard()
        )
        return USER_SELECTING_ACTION

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order = context.user_data['order']
    order_info = (
        f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω!\n\n"
        f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {order.get('discipline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìã –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {order.get('work_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω: {order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    )

    if order.get('budget', 0) > 0:
        order_info += f"üí∞ –ë—é–¥–∂–µ—Ç: {order['budget']} —Ä—É–±.\n"
    else:
        order_info += "üí∞ –ë—é–¥–∂–µ—Ç: –¶–µ–Ω—É –Ω–∞–∑–Ω–∞—á–∏—Ç —ç–∫—Å–ø–µ—Ä—Ç\n"

    if order.get('plagiarism_required', 0) == 1:
        order_info += (
            f"üîç –ê–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç: {order.get('plagiarism_system', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìä –¢—Ä–µ–±—É–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: {order.get('plagiarism_percent', 0)}%\n"
        )

    if order.get('description'):
        order_info += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {order['description'][:100]}...\n"

    order_info += f"\nüìé –§–∞–π–ª–æ–≤: {len(order.get('files', []))}"

    order_info += (
        f"\n\nüìû –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. "
        f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'."
    )

    await update.message.reply_text(order_info)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_message = (
        f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order['username']} (ID: {order['user_id']})\n"
        f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {order.get('discipline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìã –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {order.get('work_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω: {order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    )

    if order.get('budget', 0) > 0:
        admin_message += f"üí∞ –ë—é–¥–∂–µ—Ç: {order['budget']} —Ä—É–±.\n"
    else:
        admin_message += "üí∞ –ë—é–¥–∂–µ—Ç: –¶–µ–Ω—É –Ω–∞–∑–Ω–∞—á–∏—Ç —ç–∫—Å–ø–µ—Ä—Ç\n"

    await context.bot.send_message(chat_id=Config.ADMIN_ID, text=admin_message)

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    context.user_data.clear()

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_user_main_keyboard()
    )

    return USER_SELECTING_ACTION


@log_errors
async def user_skip_description(update: Update, context: CallbackContext):
    """–ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    context.user_data['order']['description'] = ""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
    order_id = save_order_to_db(context.user_data['order'])

    if not order_id:
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_user_main_keyboard()
        )
        return USER_SELECTING_ACTION

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order = context.user_data['order']
    order_info = (
        f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω!\n\n"
        f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {order.get('discipline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìã –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {order.get('work_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω: {order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    )

    if order.get('budget', 0) > 0:
        order_info += f"üí∞ –ë—é–¥–∂–µ—Ç: {order['budget']} —Ä—É–±.\n"
    else:
        order_info += "üí∞ –ë—é–¥–∂–µ—Ç: –¶–µ–Ω—É –Ω–∞–∑–Ω–∞—á–∏—Ç —ç–∫—Å–ø–µ—Ä—Ç\n"

    if order.get('plagiarism_required', 0) == 1:
        order_info += (
            f"üîç –ê–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç: {order.get('plagiarism_system', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìä –¢—Ä–µ–±—É–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: {order.get('plagiarism_percent', 0)}%\n"
        )

    order_info += f"üìé –§–∞–π–ª–æ–≤: {len(order.get('files', []))}"

    order_info += (
        f"\n\nüìû –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. "
        f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'."
    )

    await query.edit_message_text(order_info)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_message = (
        f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order['username']} (ID: {order['user_id']})\n"
        f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {order.get('discipline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìã –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {order.get('work_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω: {order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    )

    if order.get('budget', 0) > 0:
        admin_message += f"üí∞ –ë—é–¥–∂–µ—Ç: {order['budget']} —Ä—É–±.\n"
    else:
        admin_message += "üí∞ –ë—é–¥–∂–µ—Ç: –¶–µ–Ω—É –Ω–∞–∑–Ω–∞—á–∏—Ç —ç–∫—Å–ø–µ—Ä—Ç\n"

    await context.bot.send_message(chat_id=Config.ADMIN_ID, text=admin_message)

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    context.user_data.clear()

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_user_main_keyboard()
    )

    return USER_SELECTING_ACTION


@log_errors
async def user_my_orders(update: Update, context: CallbackContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    orders = get_user_orders(user_id)

    if not orders:
        await query.edit_message_text(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=get_user_main_keyboard()
        )
        return USER_SELECTING_ACTION

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    orders_text = "üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"

    for i, order in enumerate(orders, 1):
        status_emoji = {
            'new': 'üîç',
            'in_progress': 'üõ†',
            'completed': '‚úÖ',
            'cancelled': '‚ùå'
        }.get(order['status'], '‚ùì')

        orders_text += (
            f"{i}. #{order['order_id']} - {status_emoji} {Config.ORDER_STATUSES.get(order['status'], order['status'])}\n"
            f"   üìö {order.get('discipline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} - {order.get('work_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"   üìÖ {order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        )

        if order.get('final_amount', 0) > 0:
            orders_text += f"   üí∞ {order['final_amount']} —Ä—É–±.\n"

        orders_text += "\n"

    orders_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await query.edit_message_text(
        orders_text,
        reply_markup=get_user_main_keyboard()
    )

    return USER_SELECTING_ACTION


@log_errors
async def student_approve_order(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–º"""
    query = update.callback_query
    await query.answer()

    order_id = query.data.replace("student_approve_", "")
    order_details = get_order_details(order_id)

    if not order_details:
        await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    update_order_status(order_id, "completed")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await context.bot.send_message(
        chat_id=Config.ADMIN_ID,
        text=f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order_id}"
    )

    await query.edit_message_text(
        f"‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order_id}. –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ!"
    )

    return ConversationHandler.END


@log_errors
async def student_reject_order(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–º"""
    query = update.callback_query
    await query.answer()

    order_id = query.data.replace("student_reject_", "")
    order_details = get_order_details(order_id)

    if not order_details:
        await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await context.bot.send_message(
        chat_id=Config.ADMIN_ID,
        text=f"‚ùå –°—Ç—É–¥–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order_id}. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞."
    )

    await query.edit_message_text(
        f"‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order_id}. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
    )

    return ConversationHandler.END


# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
@log_errors
async def user_info(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()

    message_text = (
        "‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞, —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥, "
        "—Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö –∏ –ø—Ä–∞–≤–∏–ª–∞—Ö —Ä–∞–±–æ—Ç—ã."
    )

    await query.edit_message_text(
        text=message_text,
        reply_markup=get_info_keyboard(),
        parse_mode='Markdown'
    )
    return USER_INFO_MENU


@log_errors
async def user_info_commands(update: Update, context: CallbackContext):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞"""
    query = update.callback_query
    await query.answer()

    commands_text = (
        "üìã *–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:*\n\n"
        "*/start* - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "*/cancel* - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
        "*/admin* - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —É—á–µ–±–Ω—ã–µ —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤\n"
        "‚Ä¢ –û–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º\n"
        "‚Ä¢ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å–∏—Å—Ç–µ–º—É\n"
    )

    await query.edit_message_text(
        text=commands_text,
        reply_markup=get_back_to_info_keyboard(),
        parse_mode='Markdown'
    )
    return USER_INFO_MENU


@log_errors
async def user_info_prices(update: Update, context: CallbackContext):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥"""
    query = update.callback_query
    await query.answer()

    prices_text = (
        "üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ –ø–æ–º–æ—â–∏ –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —Ä–∞–±–æ—Ç:*\n\n"
        "‚Ä¢ –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á: –æ—Ç 100—Ä –∑–∞ –∑–∞–¥–∞—á—É\n"
        "‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞: –æ—Ç 300—Ä\n"
        "‚Ä¢ –ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞: –æ—Ç 1000—Ä\n"
        "‚Ä¢ –î–∏–ø–ª–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞: –æ—Ç 5000—Ä\n"
        "‚Ä¢ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞: –æ—Ç 400—Ä\n"
        "‚Ä¢ –†–µ—Ñ–µ—Ä–∞—Ç: –æ—Ç 300—Ä\n"
        "‚Ä¢ –≠—Å—Å–µ: –æ—Ç 250—Ä\n"
        "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥: –æ—Ç 150—Ä –∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É\n\n"
        "*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:*\n"
        "–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ "
        "–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, —Å—Ä–æ–∫–æ–≤ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ —Ä–∞–±–æ—Ç–µ."
    )

    await query.edit_message_text(
        text=prices_text,
        reply_markup=get_back_to_info_keyboard(),
        parse_mode='Markdown'
    )
    return USER_INFO_MENU


@log_errors
async def user_info_requisites(update: Update, context: CallbackContext):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö"""
    query = update.callback_query
    await query.answer()

    requisites_text = (
        "üìÑ *–†–µ–∫–≤–∏–∑–∏—Ç—ã —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ–≥–æ:*\n\n"
        "‚Ä¢ –§–ò–û: –û–¥–∏–Ω—Ü–æ–≤ –ü.–í.\n"
        "‚Ä¢ –ò–ù–ù: 711809123388\n\n"
        "*–ü–æ–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:*\n"
        "1. –ú—ã —Å–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞\n"
        "2. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n"
        "3. –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤—è–∑–∏ –ø–æ –ø–æ–≤–æ–¥—É –∑–∞–∫–∞–∑–∞\n"
        "4. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤—Å–µ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É\n"
        "5. –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö"
    )

    await query.edit_message_text(
        text=requisites_text,
        reply_markup=get_back_to_info_keyboard(),
        parse_mode='Markdown'
    )
    return USER_INFO_MENU


@log_errors
async def user_info_rules(update: Update, context: CallbackContext):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∞–≤–∏–ª–∞—Ö —Ä–∞–±–æ—Ç—ã"""
    query = update.callback_query
    await query.answer()

    rules_text = (
        "üìù *–ü—Ä–∞–≤–∏–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã:*\n\n"
        "*–°—Ä–æ–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:*\n"
        "‚Ä¢ –ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ - 1 –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á\n"
        "‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ –¥–ª—è –∫—É—Ä—Å–æ–≤—ã—Ö - 5-7 –¥–Ω–µ–π\n"
        "‚Ä¢ –î–ª—è –¥–∏–ø–ª–æ–º–Ω—ã—Ö —Ä–∞–±–æ—Ç - –æ—Ç 10 –¥–Ω–µ–π\n\n"
        "*–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã:*\n"
        "‚Ä¢ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 30% –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
        "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–∞ –æ–ø–ª–∞—Ç–∞ —á–∞—Å—Ç—è–º–∏ –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤\n"
        "‚Ä¢ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Robokassa –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã\n\n"
        "*–í–æ–∑–≤—Ä–∞—Ç/–æ—Ç–∫–∞–∑ –æ—Ç –∑–∞–∫–∞–∑–∞:*\n"
        "‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –¥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ –ü—Ä–∏ –æ—Ç–∫–∞–∑–µ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —á–∞—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤\n"
        "‚Ä¢ –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏–π"
    )

    await query.edit_message_text(
        text=rules_text,
        reply_markup=get_back_to_info_keyboard(),
        parse_mode='Markdown'
    )
    return USER_INFO_MENU


@log_errors
async def user_info_back(update: Update, context: CallbackContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()

    message_text = (
        "‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞, —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥, "
        "—Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö –∏ –ø—Ä–∞–≤–∏–ª–∞—Ö —Ä–∞–±–æ—Ç—ã."
    )

    await query.edit_message_text(
        text=message_text,
        reply_markup=get_info_keyboard(),
        parse_mode='Markdown'
    )
    return USER_INFO_MENU


@log_errors
async def handle_wrong_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞"""
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    return context.user_data.get('current_state', USER_SELECTING_ACTION)