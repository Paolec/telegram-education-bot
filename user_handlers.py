# user_handlers.py - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —á–∞—Å—Ç–∏ –±–æ—Ç–∞
import logging
import shutil
from pathlib import Path
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
from config import Config
import database
import utils
from keyboards import (
    get_disciplines_keyboard, get_work_types_keyboard, get_plagiarism_systems_keyboard,
    get_budget_type_keyboard, get_plagiarism_required_keyboard, get_upload_done_keyboard,
    get_skip_description_keyboard, get_user_main_keyboard, get_info_keyboard,
    get_back_to_info_keyboard, get_payment_confirmation_keyboard,
    get_student_confirmation_keyboard, get_payment_keyboard, get_work_approval_keyboard,
    get_orders_list_keyboard, get_order_details_keyboard
)

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
(
    USER_SELECTING_ACTION, USER_CHOOSE_DISCIPLINE, USER_CHOOSE_WORK_TYPE, USER_SET_CUSTOM_WORK_TYPE,
    USER_SET_DEADLINE, USER_SELECT_BUDGET_TYPE, USER_SET_BUDGET, USER_SET_PLAGIARISM_REQUIRED,
    USER_CHOOSING_PLAGIARISM_SYSTEM, USER_SET_PLAGIARISM_PERCENT, USER_UPLOAD_FILES,
    USER_SET_DESCRIPTION, USER_VIEWING_ORDERS, USER_INFO_MENU, USER_ORDER_DETAILS
) = range(15)


async def user_start(update: Update, context: CallbackContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å - –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback query
    if update.message:
        user = update.effective_user
        message = update.message
    elif update.callback_query:
        user = update.callback_query.from_user
        message = update.callback_query.message
        await update.callback_query.answer()
    else:
        logger.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø update")
        return ConversationHandler.END

    user_id = user.id
    username = user.username or user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['user_id'] = user_id
    context.user_data['username'] = username

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if 'order_data' in context.user_data:
        del context.user_data['order_data']

    await message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n\n"
        "–Ø ‚Äî StudHelpBot, —Ç–≤–æ–π –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É—á–µ–±–Ω–æ–º –¥–µ–ª–µ! üéì\n\n"
        "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å:\n"
        "‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å —Ä–∞–±–æ—Ç—É –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ —Å—Ä–æ–∫–æ–º –æ—Ç 1 —á–∞—Å–∞!\n"
        "‚úÖ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –æ—Ç –æ–ø—ã—Ç–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤\n"
        "‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å!\n\n"
        "–î–æ–≤–µ—Ä—å—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞–º! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_user_main_keyboard()
    )

    return USER_SELECTING_ACTION


async def user_cancel(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    if 'order_data' in context.user_data:
        del context.user_data['order_data']

    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_user_main_keyboard()
    )

    return USER_SELECTING_ACTION


async def user_create_order(update: Update, context: CallbackContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    query = update.callback_query
    await query.answer()

    user_id = context.user_data.get('user_id')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    active_orders_count = database.get_user_active_orders_count(user_id)
    if active_orders_count >= Config.MAX_ACTIVE_ORDERS:
        await query.edit_message_text(
            f"‚ùå –£ –≤–∞—Å —É–∂–µ {active_orders_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. "
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {Config.MAX_ACTIVE_ORDERS}.\n\n"
            "–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö.",
            reply_markup=get_user_main_keyboard()
        )
        return USER_SELECTING_ACTION

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    context.user_data['order_data'] = {
        'user_id': user_id,
        'username': context.user_data.get('username'),
        'order_id': utils.generate_order_id(user_id)
    }

    await query.edit_message_text(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:",
        reply_markup=get_disciplines_keyboard()
    )

    return USER_CHOOSE_DISCIPLINE


async def user_choose_discipline(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"""
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "user_back_to_start":
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_user_main_keyboard()
        )
        return USER_SELECTING_ACTION

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
    discipline_id = data.replace("user_disc_", "")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É
    discipline_name = next((name for id, name in Config.DISCIPLINES if id == discipline_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞")
    context.user_data['order_data']['discipline'] = discipline_name

    await query.edit_message_text(
        f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {discipline_name}\n\n"
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:",
        reply_markup=get_work_types_keyboard()
    )

    return USER_CHOOSE_WORK_TYPE


async def user_choose_work_type(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã"""
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "user_back_to_disciplines":
        await query.edit_message_text(
            "üìö –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:",
            reply_markup=get_disciplines_keyboard()
        )
        return USER_CHOOSE_DISCIPLINE

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã
    work_type_id = data.replace("user_work_", "")

    if work_type_id == "other":
        # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã
        await query.edit_message_text(
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ö—É—Ä—Å–æ–≤–æ–π –ø—Ä–æ–µ–∫—Ç', '–î–∏–ø–ª–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞' –∏ —Ç.–¥.):"
        )
        return USER_SET_CUSTOM_WORK_TYPE

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–∞–±–æ—Ç—ã
    work_type_name = next((name for id, name in Config.WORK_TYPES if id == work_type_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞–±–æ—Ç—ã")
    context.user_data['order_data']['work_type'] = work_type_name

    await query.edit_message_text(
        f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {context.user_data['order_data']['discipline']}\n"
        f"üìù –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type_name}\n\n"
        "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.08.2025):"
    )

    return USER_SET_DEADLINE


async def user_set_custom_work_type(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã"""
    custom_work_type = update.message.text

    if len(custom_work_type) > 100:
        await update.message.reply_text(
            "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –£–∫–∞–∂–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
        )
        return USER_SET_CUSTOM_WORK_TYPE

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏–ø —Ä–∞–±–æ—Ç—ã
    context.user_data['order_data']['work_type'] = custom_work_type

    await update.message.reply_text(
        f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {context.user_data['order_data']['discipline']}\n"
        f"üìù –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {custom_work_type}\n\n"
        "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.08.2025):"
    )

    return USER_SET_DEADLINE


async def user_handle_deadline(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–µ–¥–ª–∞–π–Ω–∞"""
    deadline_str = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–µ–¥–ª–∞–π–Ω–∞
    is_valid, result = utils.validate_deadline(deadline_str)

    if not is_valid:
        await update.message.reply_text(result)
        return USER_SET_DEADLINE

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–¥–ª–∞–π–Ω
    context.user_data['order_data']['deadline'] = deadline_str

    await update.message.reply_text(
        f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {context.user_data['order_data']['discipline']}\n"
        f"üìù –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {context.user_data['order_data']['work_type']}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω: {deadline_str}\n\n"
        "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞:",
        reply_markup=get_budget_type_keyboard()
    )

    return USER_SELECT_BUDGET_TYPE


async def user_handle_budget_type(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±—é–¥–∂–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "user_expert_budget":
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–≤–æ–¥ –±—é–¥–∂–µ—Ç–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç—É
        context.user_data['order_data']['budget'] = 0  # 0 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ü–µ–Ω—É –Ω–∞–∑–Ω–∞—á–∏—Ç —ç–∫—Å–ø–µ—Ä—Ç

        await query.edit_message_text(
            f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {context.user_data['order_data']['discipline']}\n"
            f"üìù –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {context.user_data['order_data']['work_type']}\n"
            f"üìÖ –î–µ–¥–ª–∞–π–Ω: {context.user_data['order_data']['deadline']}\n"
            f"üí∞ –ë—é–¥–∂–µ—Ç: –¶–µ–Ω—É –Ω–∞–∑–Ω–∞—á–∏—Ç —ç–∫—Å–ø–µ—Ä—Ç\n\n"
            "üîç –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç?",
            reply_markup=get_plagiarism_required_keyboard()
        )

        return USER_SET_PLAGIARISM_REQUIRED

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –±—é–¥–∂–µ—Ç–∞
    await query.edit_message_text(
        f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {context.user_data['order_data']['discipline']}\n"
        f"üìù –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {context.user_data['order_data']['work_type']}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω: {context.user_data['order_data']['deadline']}\n\n"
        f"üí∞ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {Config.MIN_BUDGET} —Ä—É–±.):"
    )

    return USER_SET_BUDGET


async def user_handle_budget(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞"""
    budget_str = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –±—é–¥–∂–µ—Ç–∞
    is_valid, result = utils.validate_budget(budget_str)

    if not is_valid:
        await update.message.reply_text(result)
        return USER_SET_BUDGET

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—é–¥–∂–µ—Ç
    context.user_data['order_data']['budget'] = result

    await update.message.reply_text(
        f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {context.user_data['order_data']['discipline']}\n"
        f"üìù –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {context.user_data['order_data']['work_type']}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω: {context.user_data['order_data']['deadline']}\n"
        f"üí∞ –ë—é–¥–∂–µ—Ç: {result} —Ä—É–±.\n\n"
        "üîç –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç?",
        reply_markup=get_plagiarism_required_keyboard()
    )

    return USER_SET_PLAGIARISM_REQUIRED


async def user_handle_plagiarism_required(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç–∞"""
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "user_plagiarism_no":
        # –ê–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        context.user_data['order_data']['plagiarism_required'] = False

        await query.edit_message_text(
            f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {context.user_data['order_data']['discipline']}\n"
            f"üìù –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {context.user_data['order_data']['work_type']}\n"
            f"üìÖ –î–µ–¥–ª–∞–π–Ω: {context.user_data['order_data']['deadline']}\n"
            f"üí∞ –ë—é–¥–∂–µ—Ç: {context.user_data['order_data']['budget']} —Ä—É–±.\n"
            f"üîç –ê–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç: –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è\n\n"
            "üìé –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —Å –∑–∞–¥–∞–Ω–∏–µ–º (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É':",
            reply_markup=get_upload_done_keyboard()
        )

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∑–∞–∫–∞–∑–∞
        order_id = context.user_data['order_data']['order_id']
        user_id = context.user_data['order_data']['user_id']
        order_folder = utils.create_order_folder(order_id, user_id)

        if order_folder:
            context.user_data['order_data']['files_folder'] = str(order_folder)
            context.user_data['order_data']['files'] = []

        return USER_UPLOAD_FILES

    # –ê–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç —Ç—Ä–µ–±—É–µ—Ç—Å—è
    context.user_data['order_data']['plagiarism_required'] = True

    await query.edit_message_text(
        f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {context.user_data['order_data']['discipline']}\n"
        f"üìù –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {context.user_data['order_data']['work_type']}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω: {context.user_data['order_data']['deadline']}\n"
        f"üí∞ –ë—é–¥–∂–µ—Ç: {context.user_data['order_data']['budget']} —Ä—É–±.\n"
        f"üîç –ê–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç: –¢—Ä–µ–±—É–µ—Ç—Å—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏:",
        reply_markup=get_plagiarism_systems_keyboard()
    )

    return USER_CHOOSING_PLAGIARISM_SYSTEM


async def user_handle_plagiarism_system(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –∞–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç–∞"""
    query = update.callback_query
    await query.answer()

    data = query.data
    system_id = data.replace("user_plag_sys_", "")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    system_data = Config.PLAGIARISM_SYSTEMS.get(system_id, {})
    context.user_data['order_data']['plagiarism_system'] = system_id
    context.user_data['order_data']['plagiarism_system_name'] = system_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞')

    await query.edit_message_text(
        f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {context.user_data['order_data']['discipline']}\n"
        f"üìù –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {context.user_data['order_data']['work_type']}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω: {context.user_data['order_data']['deadline']}\n"
        f"üí∞ –ë—é–¥–∂–µ—Ç: {context.user_data['order_data']['budget']} —Ä—É–±.\n"
        f"üîç –ê–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç: {system_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞')}\n\n"
        "üìä –£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (0-100):"
    )

    return USER_SET_PLAGIARISM_PERCENT


async def user_handle_plagiarism_percent(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∞–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç–∞"""
    percent_str = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    is_valid, result = utils.validate_plagiarism_percent(percent_str)

    if not is_valid:
        await update.message.reply_text(result)
        return USER_SET_PLAGIARISM_PERCENT

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
    context.user_data['order_data']['plagiarism_percent'] = result

    await update.message.reply_text(
        f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {context.user_data['order_data']['discipline']}\n"
        f"üìù –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {context.user_data['order_data']['work_type']}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω: {context.user_data['order_data']['deadline']}\n"
        f"üí∞ –ë—é–¥–∂–µ—Ç: {context.user_data['order_data']['budget']} —Ä—É–±.\n"
        f"üîç –ê–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç: {context.user_data['order_data']['plagiarism_system_name']}\n"
        f"üìä –¢—Ä–µ–±—É–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: {result}%\n\n"
        "üìé –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —Å –∑–∞–¥–∞–Ω–∏–µ–º (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É':",
        reply_markup=get_upload_done_keyboard()
    )

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∑–∞–∫–∞–∑–∞
    order_id = context.user_data['order_data']['order_id']
    user_id = context.user_data['order_data']['user_id']
    order_folder = utils.create_order_folder(order_id, user_id)

    if order_folder:
        context.user_data['order_data']['files_folder'] = str(order_folder)
        context.user_data['order_data']['files'] = []

    return USER_UPLOAD_FILES


async def user_handle_files(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    order_data = context.user_data.get('order_data', {})

    if not order_data or 'files_folder' not in order_data:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return USER_SELECTING_ACTION

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    file = None
    file_path = None

    if update.message.document:
        file = update.message.document
    elif update.message.photo:
        file = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ

    if file:
        file_path = await utils.save_file(file, Path(order_data['files_folder']))

    if file_path:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫
        if 'files' not in order_data:
            order_data['files'] = []

        order_data['files'].append(file_path)
        context.user_data['order_data'] = order_data

        await update.message.reply_text(
            f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(order_data['files'])}\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É':",
            reply_markup=get_upload_done_keyboard()
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    return USER_UPLOAD_FILES


async def user_handle_upload_done(update: Update, context: CallbackContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    query = update.callback_query
    await query.answer()

    order_data = context.user_data.get('order_data', {})

    if not order_data:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return USER_SELECTING_ACTION

    await query.edit_message_text(
        f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {order_data['discipline']}\n"
        f"üìù –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {order_data['work_type']}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω: {order_data['deadline']}\n"
        f"üí∞ –ë—é–¥–∂–µ—Ç: {order_data['budget']} —Ä—É–±.\n"
        f"üîç –ê–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç: {order_data.get('plagiarism_system_name', '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è')}\n"
        f"üìä –¢—Ä–µ–±—É–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: {order_data.get('plagiarism_percent', '0')}%\n"
        f"üìé –§–∞–π–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(order_data.get('files', []))}\n\n"
        "‚úçÔ∏è –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ'):",
        reply_markup=get_skip_description_keyboard()
    )

    return USER_SET_DESCRIPTION


async def user_handle_description(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    description = update.message.text

    if len(description) > 1000:
        await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –£–∫–æ—Ä–æ—Ç–∏—Ç–µ –µ–≥–æ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤:")
        return USER_SET_DESCRIPTION

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    context.user_data['order_data']['description'] = description

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    return await finish_order_creation(update, context)


async def user_skip_description(update: Update, context: CallbackContext):
    """–ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    context.user_data['order_data']['description'] = ""

    return await finish_order_creation(update, context)


async def finish_order_creation(update: Update, context: CallbackContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    order_data = context.user_data.get('order_data', {})

    if not order_data:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
        if update.message:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        elif update.callback_query:
            await update.callback_query.edit_message_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        else:
            logger.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø update –≤ finish_order_creation")
        return USER_SELECTING_ACTION

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    order_id = database.save_order_to_db(order_data)

    if not order_id:
        if update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        elif update.callback_query:
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return USER_SELECTING_ACTION

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
    message = (
        f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω!\n\n"
        f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {order_data['discipline']}\n"
        f"üìù –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {order_data['work_type']}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω: {order_data['deadline']}\n"
    )

    if order_data.get('budget', 0) > 0:
        message += f"üí∞ –ë—é–¥–∂–µ—Ç: {order_data['budget']} —Ä—É–±.\n"
    else:
        message += "üí∞ –ë—é–¥–∂–µ—Ç: –¶–µ–Ω—É –Ω–∞–∑–Ω–∞—á–∏—Ç —ç–∫—Å–ø–µ—Ä—Ç\n"

    if order_data.get('plagiarism_required', False):
        message += (
            f"üîç –ê–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç: {order_data.get('plagiarism_system_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞')}\n"
            f"üìä –¢—Ä–µ–±—É–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: {order_data.get('plagiarism_percent', 0)}%\n"
        )

    message += f"üìé –§–∞–π–ª–æ–≤: {len(order_data.get('files', []))}\n"

    if order_data.get('description'):
        message += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {order_data.get('description')[:100]}...\n"

    message += "\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —ç–∫—Å–ø–µ—Ä—Ç –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
    if update.message:
        await update.message.reply_text(message, reply_markup=get_user_main_keyboard())
    elif update.callback_query:
        await update.callback_query.edit_message_text(message, reply_markup=get_user_main_keyboard())

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
    try:
        admin_message = (
            f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{order_data['username']} (ID: {order_data['user_id']})\n"
            f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {order_data['discipline']}\n"
            f"üìù –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {order_data['work_type']}\n"
            f"üìÖ –î–µ–¥–ª–∞–π–Ω: {order_data['deadline']}\n"
        )

        if order_data.get('budget', 0) > 0:
            admin_message += f"üí∞ –ë—é–¥–∂–µ—Ç: {order_data['budget']} —Ä—É–±.\n"
        else:
            admin_message += "üí∞ –ë—é–¥–∂–µ—Ç: –¶–µ–Ω—É –Ω–∞–∑–Ω–∞—á–∏—Ç —ç–∫—Å–ø–µ—Ä—Ç\n"

        if order_data.get('plagiarism_required', False):
            admin_message += f"üîç –ê–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç: {order_data.get('plagiarism_system_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞')}\n"
            admin_message += f"üìä –¢—Ä–µ–±—É–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: {order_data.get('plagiarism_percent', 0)}%\n"

        if order_data.get('description'):
            admin_message += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {order_data.get('description')}\n"

        admin_message += f"üìé –§–∞–π–ª–æ–≤: {len(order_data.get('files', []))}\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await context.bot.send_message(
            chat_id=Config.ADMIN_ID,
            text=admin_message
        )

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if order_data.get('files'):
            await context.bot.send_message(
                chat_id=Config.ADMIN_ID,
                text=f"üìé –ó–∞–∫–∞–∑ #{order_id} —Å–æ–¥–µ—Ä–∂–∏—Ç {len(order_data['files'])} —Ñ–∞–π–ª–æ–≤."
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

    return USER_SELECTING_ACTION


async def user_my_orders(update: Update, context: CallbackContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()

    user_id = context.user_data.get('user_id')

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    orders = database.get_user_orders(user_id)

    if not orders:
        await query.edit_message_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.",
            reply_markup=get_user_main_keyboard()
        )
        return USER_SELECTING_ACTION

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    context.user_data['user_orders'] = orders
    context.user_data['orders_page'] = 0

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤
    return await show_orders_page(update, context, 0)


async def show_orders_page(update: Update, context: CallbackContext, page=0):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–∫–∞–∑–∞–º–∏"""
    orders = context.user_data.get('user_orders', [])
    orders_per_page = 5
    total_pages = (len(orders) + orders_per_page - 1) // orders_per_page

    if page >= total_pages:
        page = total_pages - 1
    if page < 0:
        page = 0

    context.user_data['orders_page'] = page

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * orders_per_page
    end_idx = min((page + 1) * orders_per_page, len(orders))
    current_orders = orders[start_idx:end_idx]

    message = "üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"

    for i, order in enumerate(current_orders, start_idx + 1):
        status_emoji = {
            'new': 'üîç',
            'in_progress': 'üõ†',
            'completed': '‚úÖ',
            'cancelled': '‚ùå',
            'waiting_payment': 'üí≥',
            'paid': 'üí∞',
            'work_uploaded': 'üì§',
            'revision_requested': 'üîÑ'
        }.get(order['status'], '‚ùì')

        message += f"{i}. {status_emoji} –ó–∞–∫–∞–∑ #{order['order_id']}\n"
        message += f"   üìö {order['discipline']} - {order['work_type']}\n"
        message += f"   üîÑ {Config.ORDER_STATUSES.get(order['status'], order['status'])}\n"
        message += f"   üìÖ {order['deadline']}\n\n"

    message += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}"

    if isinstance(update, Update) and update.callback_query:
        await update.callback_query.edit_message_text(
            message,
            reply_markup=get_orders_list_keyboard(current_orders, page, total_pages)
        )
    else:
        await update.message.reply_text(
            message,
            reply_markup=get_orders_list_keyboard(current_orders, page, total_pages)
        )

    return USER_VIEWING_ORDERS


async def user_view_order(update: Update, context: CallbackContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    query = update.callback_query
    await query.answer()

    order_id = query.data.replace('user_view_order_', '')

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order = database.get_order_details(order_id)

    if not order:
        await query.edit_message_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return USER_VIEWING_ORDERS

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
    message = (
        f"üìã –ó–∞–∫–∞–∑ #{order['order_id']}\n"
        f"üë§ –í–∞—à ID: {order['user_id']}\n"
        f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {order['discipline']}\n"
        f"üìù –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {order['work_type']}\n"
        f"üìÖ –î–µ–¥–ª–∞–π–Ω: {order['deadline']}\n"
        f"üí∞ –ë—é–¥–∂–µ—Ç: {order['budget']} —Ä—É–±.\n"
        f"üíµ –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {order['final_amount']} —Ä—É–±.\n"
        f"üîÑ –°—Ç–∞—Ç—É—Å: {Config.ORDER_STATUSES.get(order['status'], order['status'])}\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç–µ, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if order['plagiarism_required']:
        plagiarism_system = Config.PLAGIARISM_SYSTEMS.get(order['plagiarism_system'], {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        message += f"üîç –°–∏—Å—Ç–µ–º–∞ –∞–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç–∞: {plagiarism_system}\n"
        message += f"üìä –¢—Ä–µ–±—É–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: {order['plagiarism_percent']}%\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
    if order['files']:
        message += f"üìé –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã: {order['files']}\n"

    if order['completed_files']:
        message += f"üì¶ –ì–æ—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã: {order['completed_files']}\n"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã
    can_download = False
    if order['status'] == 'completed' and order['completed_at']:
        can_download = utils.is_file_available(order['completed_at'])
        if can_download:
            message += "\n‚úÖ –§–∞–π–ª—ã –≥–æ—Ç–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"
        else:
            message += "\n‚ùå –§–∞–π–ª—ã –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã (–ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 30 –¥–Ω–µ–π)"

    await query.edit_message_text(
        message,
        reply_markup=get_order_details_keyboard(order_id, order['status'], can_download)
    )

    return USER_ORDER_DETAILS


async def user_download_work(update: Update, context: CallbackContext):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
    query = update.callback_query
    await query.answer()

    order_id = query.data.replace('user_download_work_', '')

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order = database.get_order_details(order_id)

    if not order or order['status'] != 'completed' or not order['completed_at']:
        await query.answer("–†–∞–±–æ—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
        return USER_ORDER_DETAILS

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤
    if not utils.is_file_available(order['completed_at']):
        await query.answer("–°—Ä–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫ (30 –¥–Ω–µ–π).")
        return USER_ORDER_DETAILS

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_id = order['user_id']
    completed_folder = utils.create_order_folder(order_id, user_id, "completed")

    if completed_folder and completed_folder.exists():
        files = list(completed_folder.glob('*'))
        for file in files:
            if file.is_file():
                try:
                    await context.bot.send_document(
                        chat_id=query.message.chat_id,
                        document=open(file, 'rb'),
                        caption=f"–§–∞–π–ª –∏–∑ –∑–∞–∫–∞–∑–∞ #{order_id}"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {file.name}: {e}")

        await query.answer("–§–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç.")
    else:
        await query.answer("–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    return USER_ORDER_DETAILS


async def user_back_to_orders(update: Update, context: CallbackContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤"""
    query = update.callback_query
    await query.answer()

    page = context.user_data.get('orders_page', 0)
    return await show_orders_page(update, context, page)


async def user_orders_navigation(update: Update, context: CallbackContext):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∑–∞–∫–∞–∑–æ–≤"""
    query = update.callback_query
    await query.answer()

    data = query.data
    current_page = context.user_data.get('orders_page', 0)

    if data.startswith('user_orders_prev_'):
        new_page = int(data.replace('user_orders_prev_', ''))
    elif data.startswith('user_orders_next_'):
        new_page = int(data.replace('user_orders_next_', ''))
    else:
        new_page = current_page

    return await show_orders_page(update, context, new_page)


async def user_info(update: Update, context: CallbackContext):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞"""
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞, —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥ –∏ –ø—Ä–∞–≤–∏–ª–∞—Ö —Ä–∞–±–æ—Ç—ã.",
        reply_markup=get_info_keyboard()
    )

    return USER_INFO_MENU


async def user_info_commands(update: Update, context: CallbackContext):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö"""
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.\n\n"
        "üëâ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: @AssistSTUD",
        reply_markup=get_back_to_info_keyboard()
    )

    return USER_INFO_MENU


async def user_info_prices(update: Update, context: CallbackContext):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö"""
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥:\n\n"
        "üìä –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ü–µ–Ω—ã –∏ —Å—Ä–æ–∫–∏:\n\n"
        "üìù –î–æ–∫–ª–∞–¥ - –æ—Ç 3 —á–∞—Å–æ–≤, –æ—Ç 500‚ÇΩ\n"
        "‚úÖ –¢–µ—Å—Ç - –æ—Ç 2 —á–∞—Å–æ–≤, –æ—Ç 300‚ÇΩ\n"
        "üß™ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ - –æ—Ç 4 —á–∞—Å–æ–≤, –æ—Ç 500‚ÇΩ\n"
        "üé´ –û—Ç–≤–µ—Ç—ã –Ω–∞ –±–∏–ª–µ—Ç—ã - –æ—Ç 2 —á–∞—Å–æ–≤, –æ—Ç 400‚ÇΩ\n"
        "üéì –î–∏–ø–ª–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞ - –æ—Ç 3 –¥–Ω–µ–π, –æ—Ç 5000‚ÇΩ\n"
        "üìã –û—Ç—á–µ—Ç –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–µ - –æ—Ç 1 –¥–Ω—è, –æ—Ç 1000‚ÇΩ\n\n"
        "üìå –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç:\n"
        "‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã\n"
        "‚Ä¢ –û–±—ä–µ–º–∞ —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ –°—Ä–æ—á–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
        "‚Ä¢ –¢—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –∞–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç—É\n\n"
        "–¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞–º –Ω–∞–∑–æ–≤–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç –ø–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.\n\n"
        "üëâ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: @AssistSTUD",
        reply_markup=get_back_to_info_keyboard()
    )

    return USER_INFO_MENU


async def user_info_requisites(update: Update, context: CallbackContext):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö"""
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "üìÑ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n"
        "–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑:\n"
        "‚Ä¢ Robokassa (–±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã, —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏)\n"
        "‚Ä¢ –ÆMoney\n"
        "‚Ä¢ QIWI\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–∞–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–Ω–∞—è —Å—Å—ã–ª–∫–∞.",
        reply_markup=get_back_to_info_keyboard()
    )

    return USER_INFO_MENU


async def user_info_rules(update: Update, context: CallbackContext):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∞–≤–∏–ª–∞—Ö"""
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "üìù –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã:\n\n"
        "1. –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º\n"
        "2. –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ–∑–º–æ–∂–µ–Ω –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ –¥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã\n"
        "3. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n"
        "4. –†–∞–±–æ—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏\n"
        "5. –í–æ–∑–º–æ–∂–Ω—ã –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–ª—É—á–∞–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º\n\n"
        "üëâ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: @AssistSTUD",
        reply_markup=get_back_to_info_keyboard()
    )

    return USER_INFO_MENU


async def user_info_back(update: Update, context: CallbackContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–º—É –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞, —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ –∏ –ø—Ä–∞–≤–∏–ª–∞—Ö —Ä–∞–±–æ—Ç—ã.",
        reply_markup=get_info_keyboard()
    )

    return USER_INFO_MENU


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
async def student_approve_order(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–º"""
    query = update.callback_query
    await query.answer()

    order_id = query.data.split('_')[-1]

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order = database.get_order_details(order_id)
    if not order:
        await query.edit_message_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    database.update_order_status(order_id, 'waiting_payment')

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É
    from payment import generate_robokassa_payment_link
    payment_url = generate_robokassa_payment_link(
        order_id=order_id,
        amount=order['final_amount'],
        description=f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id}",
        user_id=order['user_id']
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –±–∞–∑–µ
    database.update_payment_url(order_id, payment_url)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
    payment_message = (
        f"‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {order['final_amount']} —Ä—É–±.\n"
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)'."
    )

    keyboard = get_payment_keyboard(order_id, order['final_amount'], order['user_id'])

    await query.edit_message_text(payment_message, reply_markup=keyboard)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        from main import application
        await application.bot.send_message(
            chat_id=Config.ADMIN_ID,
            text=f"–°—Ç—É–¥–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫–∞–∑ #{order_id}. –û–∂–∏–¥–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")


async def student_reject_order(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–º"""
    query = update.callback_query
    await query.answer()

    order_id = query.data.split('_')[-1]

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order = database.get_order_details(order_id)
    if not order:
        await query.edit_message_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    database.delete_order(order_id)

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∑–∞–∫–∞–∑–∞
    if order:
        user_id = order['user_id']
        order_folder = utils.create_order_folder(order_id, user_id)
        if order_folder and order_folder.exists():
            shutil.rmtree(order_folder)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        from main import application
        await application.bot.send_message(
            chat_id=Config.ADMIN_ID,
            text=f"–°—Ç—É–¥–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–∫–∞–∑ #{order_id}. –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

    await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω.")


async def student_paid_order(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–º"""
    query = update.callback_query
    await query.answer()

    order_id = query.data.split('_')[-1]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    database.update_order_status(order_id, 'paid')
    database.update_payment_status(order_id, 'paid')

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        from main import application
        await application.bot.send_message(
            chat_id=Config.ADMIN_ID,
            text=f"–°—Ç—É–¥–µ–Ω—Ç –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑ #{order_id}. –ú–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

    await query.edit_message_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –≠–∫—Å–ø–µ—Ä—Ç –ø—Ä–∏—Å—Ç—É–ø–∏—Ç –∫ —Ä–∞–±–æ—Ç–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")


async def student_accept_work(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–∞–±–æ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–º"""
    query = update.callback_query
    await query.answer()

    order_id = query.data.split('_')[-1]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    database.update_order_status(order_id, 'completed')

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        from main import application
        await application.bot.send_message(
            chat_id=Config.ADMIN_ID,
            text=f"–°—Ç—É–¥–µ–Ω—Ç –ø—Ä–∏–Ω—è–ª —Ä–∞–±–æ—Ç—É –ø–æ –∑–∞–∫–∞–∑—É #{order_id}. –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

    await query.edit_message_text("‚úÖ –†–∞–±–æ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ!")


async def student_request_revision(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–º"""
    query = update.callback_query
    await query.answer()

    order_id = query.data.split('_')[-1]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    database.update_order_status(order_id, 'revision_requested')

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        from main import application
        await application.bot.send_message(
            chat_id=Config.ADMIN_ID,
            text=f"–°—Ç—É–¥–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ—Ä–∞–±–æ—Ç–∫—É –ø–æ –∑–∞–∫–∞–∑—É #{order_id}."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

    await query.edit_message_text("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –≠–∫—Å–ø–µ—Ä—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")